//
//  DiscoverMoviesViewController.swift
//  DataMovie
//
//  Created by Andre Souza on 24/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class DiscoverMoviesViewController: DMBaseViewController {
    
    @IBOutlet private weak var tableView: UITableView! {
        didSet {
            setupTableView()
        }
    }
    
    @IBOutlet weak var tableViewFooter: UIView!
    @IBOutlet weak var footerLabel: UILabel!
    @IBOutlet weak var footerActivity: UIActivityIndicatorView!
    
    private let tableCellHeight: CGFloat = 115
    private var isLoading: Bool = false

    // MARK: - Public properties -

    var presenter: DiscoverMoviesPresenterInterface!
    var viewController: UIViewController {
        return self
    }

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setup3Dtouch()
        presenter.viewDidLoad()
    }
	
}

// MARK: - Funcs -

extension DiscoverMoviesViewController {
    
    private func setupTableView() {
        tableView.register(MovieListTableViewCell.self)
        tableView.dataSource = self
        tableView.delegate = self
    }
    
    private func setup3Dtouch() {
        if(traitCollection.forceTouchCapability == .available){
            registerForPreviewing(with: self, sourceView: tableView)
        }
    }
    
}

// MARK: - Extensions -

extension DiscoverMoviesViewController: DiscoverMoviesViewInterface {
    
    func updateItemStatus(with movieID: Int, isComplete: Bool) {
        presenter.updateItemStatus(with: movieID, isComplete: isComplete)
    }
    
    func showFooterUpdatedMessage(message: String) {
        footerLabel.text = message
        footerActivity.isHidden = true
    }
    
    func reloadData() {
        tableView.reloadData()
    }
    
    func reloadData(at index: IndexPath) {
        tableView.reloadRows(at: [index], with: .none)
    }
    
    func showError(error: ErrorInterface, target: Any, action: Selector) {
        showFenceError(error: error, target: target, action: action)
    }
    
    func showFooterLoading(_ loading: Bool) {
        tableViewFooter.isHidden = !loading
    }
    
    func showTableviewLoading(_ loading: Bool) {
        isLoading = loading
        tableView.isUserInteractionEnabled = !loading
        tableView.reloadData()
    }
    
    func hideErrorView() {
        hideFenceView()
    }
    
}

// MARK: - UITableViewDataSource -

extension DiscoverMoviesViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return presenter.numberOfSections()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if isLoading {
            let loadingRows = ceil(tableView.bounds.height / tableCellHeight)
            return max(Int(loadingRows), presenter.numberOfItems(in: section))
        }
        return presenter.numberOfItems(in: section)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(forIndexPath: indexPath) as MovieListTableViewCell
        cell.isLoading = isLoading
        if !isLoading {
            presenter.loadPosterImage(cell.posterImage, at: indexPath)
            cell.item = presenter.discoverItem(at: indexPath)
            cell.tableViewProtocol = self
        } 
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableCellHeight
    }
    
}

// MARK: - UITableViewDelegate -

extension DiscoverMoviesViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        presenter.didSelectItem(at: indexPath)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let lastElement = presenter.numberOfItems(in: indexPath.section) - 1
        if !tableViewFooter.isHidden && indexPath.row == lastElement {
            presenter.loadItems()
        }
    }
    
}

// MARK: - UIViewControllerPreviewingDelegate -

extension DiscoverMoviesViewController: UIViewControllerPreviewingDelegate {
    
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, commit viewControllerToCommit: UIViewController) {
        show(viewControllerToCommit, sender: self)
    }
    
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint) -> UIViewController? {
        guard let indexPath = tableView.indexPathForRow(at: location) else { return nil }
        previewingContext.sourceRect = tableView.rectForRow(at: indexPath)
        let detailVC = MovieListCellDetailViewController.newInstance(addProtocol: presenter, indexPath: indexPath)
        return detailVC
    }
    
}

// MARK: - AddMoviesTableViewProtocol -

extension DiscoverMoviesViewController: AddMoviesTableViewProtocol {

    func touchAddMovie(from row: UITableViewCell) {
        if let indexPath = tableView.indexPath(for: row) {
            presenter.addMovie(indexPath: indexPath)
        }
    }

}
