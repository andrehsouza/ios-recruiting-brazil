//
//  ListMoviesViewController.swift
//  DataMovie
//
//  Created by Andre on 12/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class ListMoviesViewController: DMBaseViewController {
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var btAddMovies: DMCircleButton!
    
    private var selectedIndex = IndexPath(index: -1)
    private lazy var cellFrame: CGSize = {
        let cellWith = CGFloat((Int((collectionView.frame.width - 20) / 3)))
        let cellHeight = cellWith * 1.5
        return CGSize(width: cellWith, height: cellHeight)
    }()
    
    private lazy var circularTransition: CircularTransition = {
        let relativePosition = view.convert(btAddMovies.center, to: navigationController?.view)
        let circularTransition = CircularTransition(startingPoint: relativePosition, circleColor: btAddMovies.fillColor, viewBackgroundColor: .backgroundColorDarker)
        circularTransition.fromDelegate = self
        return circularTransition
    }()
    
    private lazy var imageInteractor: ImageInteractor = ImageInteractor()
    private lazy var dismissInteractor: DismissInteracor = DismissInteracor()
    
    private lazy var imageAnimatorTransition: ImageAnimatorTransition = {
        let imageAnimatorTransition = ImageAnimatorTransition()
        imageAnimatorTransition.fromDelegate = self
        return imageAnimatorTransition
    }()
    
    // MARK: - Public properties -

    var presenter: ListMoviesPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        initialSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setDefaultNavbar()
    }
    
    @IBAction func touchAdd(_ sender: DMCircleButton) {
        presenter.addMovies(circularTransiction: circularTransition)
    }
    
    @IBAction func touchFilterOptions(_ sender: Any) {
        presenter.touchFilterOptions()
    }
    
	
}

// MARK: - Functions -

extension ListMoviesViewController {
    
    private func initialSetup() {
        setupSearchBar()
        setDefaultNavbar()
        setupCollectionView()
        edgesForExtendedLayout = .all
        navigationController?.delegate = self
    }
    
    private func setupCollectionView() {
        collectionView.register(MovieCollectionViewCell.self)
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.contentInsetAdjustmentBehavior = .never
    }
    
    private func setupSearchBar() {
        searchBar.delegate = self
    }
    
    private func animateAddButton() {
        UIView.animate(withDuration: 0.6,  delay: 0.0, usingSpringWithDamping: 0.55, initialSpringVelocity: 0.0, options: [.curveEaseInOut], animations: {
            self.btAddMovies.transform = CGAffineTransform.identity
        })
    }
    
}

// MARK: - ListMoviesViewInterface -

extension ListMoviesViewController: ListMoviesViewInterface {
    
    func showFilterOptions(withProtocol fiterActionProtocol: AlertFiterActionProtocol, andFilterList: [AlertListMovieFilterModel]) {
        showFilterAlert(fiterActionProtocol, andFilterList)
    }
    
    var imageTransition: ImageAnimatorTransition {
        return imageAnimatorTransition
    }
    
    func scrollCollectionToFirstItem() {
        collectionView.contentOffset.x = 0
    }
    
    func reloadData(completion: (()-> Void)?) {
        collectionView.reloadData(completion: {
            completion?()
        })
    }
    
}

//MARK: - UICollectionViewDelegate -

extension ListMoviesViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath) {
        UIView.animate(withDuration: 0.5) {
            let cell = collectionView.cellForItem(at: indexPath)
            cell?.contentView.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath) {
        UIView.animate(withDuration: 0.5) {
            let cell = collectionView.cellForItem(at: indexPath)
            cell?.contentView.transform = CGAffineTransform.identity
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedIndex = indexPath
        presenter.didSelectItem(at: indexPath)
    }
    
}

//MARK: - UICollectionViewDataSource -

extension ListMoviesViewController: UICollectionViewDataSource {
    
    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter.numberOfItems()
    }
    
    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(forIndexPath: indexPath) as MovieCollectionViewCell
        cell.item = presenter.item(at: indexPath)
        return cell
    }
    
    public func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        
        let footerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: MovieCollectionViewFooter.identifier, for: indexPath) as! MovieCollectionViewFooter
        
        footerView.messageLbl.text = presenter.footerMessage
        if collectionView.bounds.intersects(footerView.frame) {
            presenter.loadMovies()
        }
        
        return footerView
    }
    
}

//MARK: - UICollectionViewDelegateFlowLayout -

extension ListMoviesViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return cellFrame
    }
    
}

// MARK: - UIViewControllerTransitioningDelegate -

extension ListMoviesViewController: UIViewControllerTransitioningDelegate {
    
    func interactionControllerForDismissal(using animator: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {
        return dismissInteractor.isInProgress ? dismissInteractor : nil
    }
    
    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        circularTransition.transitionMode = .present
        dismissInteractor.viewControllerToAttach = presented
        return circularTransition
    }
    
    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        circularTransition.transitionMode = .dismiss
        return circularTransition
    }
    
}

// MARK: - UINavigationControllerDelegate -

extension ListMoviesViewController: UINavigationControllerDelegate {
    
    func navigationController(_ navigationController: UINavigationController, interactionControllerFor animationController: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {
        return imageInteractor.isInProgress ? imageInteractor : nil
    }
    
    func navigationController(_ navigationController: UINavigationController, animationControllerFor operation: UINavigationController.Operation, from fromVC: UIViewController, to toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        
        if operation == .push {
            imageInteractor.navControllerToAttach = navigationController
            imageAnimatorTransition.transitionMode = .push
        } else {
            imageAnimatorTransition.transitionMode = .pop
        }
        
        return imageAnimatorTransition
    }
    
}

//MARK: - ImageAnimatorDelegate -

extension ListMoviesViewController: ImageAnimatorDelegate {
    
    func transitionWillStartWith(animator: ImageAnimatorTransition) {
        btAddMovies.transform = CGAffineTransform(scaleX: 0.0, y: 0.0)
    }
    
    func transitionDidEndWith(animator: ImageAnimatorTransition) {
        animateAddButton()
    }
    
    func referenceImageView(for animator: ImageAnimatorTransition) -> UIImageView? {
        let cell = collectionView.cellForItem(at: selectedIndex) as? MovieCollectionViewCell ?? MovieCollectionViewCell()
        return cell.imgPoster
    }
    
    func referenceImageViewFrameInTransitioningView(for animator: ImageAnimatorTransition) -> CGRect? {
        view.layoutIfNeeded()
        
        let cell = collectionView.cellForItem(at: selectedIndex) as! MovieCollectionViewCell
        let cellFrame = collectionView.convert(cell.frame, to: view)
        
        if cellFrame.minY < self.collectionView.contentInset.top {
            collectionView.scrollToItem(at: selectedIndex, at: .top, animated: true)
        } else if cellFrame.maxY > view.frame.height - collectionView.contentInset.top {
            collectionView.scrollToItem(at: selectedIndex, at: .bottom, animated: true)
        }
        
        return cellFrame
    }
    
}

//MARK: - CircularAnimatorDelegate -

extension ListMoviesViewController: CircularAnimatorDelegate {
    
    func transitionWillStartWith(animator: CircularTransition) {
        btAddMovies.transform = CGAffineTransform(scaleX: 0.3, y: 0.3)
    }
    
    func transitionDidEndWith(animator: CircularTransition) {
        animateAddButton()
        if animator.transitionMode == .dismiss {
            refreshList()
        }
    }
    
}

//MARK: - UISearchBarDelegate -

extension ListMoviesViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        presenter.filterMovies(by: searchText)
    }
    
}


//MARK: - UIToolbarDelegate -

extension ListMoviesViewController: UIToolbarDelegate {
    
    func positionForBar(bar: UIBarPositioning) -> UIBarPosition {
        return .topAttached
    }
}

//MARK: - Filter alert -

extension ListMoviesViewController {
    
    private func showFilterAlert(_ fiterActionProtocol: AlertFiterActionProtocol, _ filterList: [AlertListMovieFilterModel]) {
        let alert = UIAlertController(title: "", message: "Filter list:", preferredStyle: .actionSheet)

        filterList.forEach() { filter in
            let alertActionVC = AlertFilterViewController.newInstance(with: filter, fiterActionProtocol: fiterActionProtocol)
            let action = UIAlertAction(title: "", style: .default)
            action.isEnabled = false
            action.set(vc: alertActionVC)
            alert.addAction(action)
        }

        let cancelAction = UIAlertAction(title: "Ok", style: .cancel)
        alert.addAction(cancelAction)
        alert.view.tintColor = .blueColor

        present(alert, animated: true)
    }
    
    private func refreshList() {
        let isLastRowVisible = collectionView.indexPathsForVisibleItems.map({ $0.row }).contains(presenter.numberOfItems() - 1)
        if isLastRowVisible {
            presenter.refreshList()
        }
    }
    
}
