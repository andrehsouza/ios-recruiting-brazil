//
//  SearchMoviesPresenter.swift
//  DataMovie
//
//  Created by Andre on 26/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class SearchMoviesPresenter {

    // MARK: - Private properties -

    private unowned var _view: SearchMoviesViewInterface
    private var _interactor: SearchMoviesInteractorInterface
    private var _wireframe: SearchMoviesWireframeInterface
    private var _discoverMovieList = DiscoverMovieListModel()
    private var _isLoading: Bool = false
    private var _queryTitle: String = ""
    private var _addMoviesProtocol: AddMoviesProtocol
    
    var movieListCellDetailViewProtocol: MovieListCellDetailViewProtocol?

    // MARK: - Lifecycle -

    init(wireframe: SearchMoviesWireframeInterface, view: SearchMoviesViewInterface, interactor: SearchMoviesInteractorInterface, addMoviesProtocol: AddMoviesProtocol) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        _addMoviesProtocol = addMoviesProtocol
    }
}

// MARK: - Extensions -

extension SearchMoviesPresenter: SearchMoviesPresenterInterface {
    
    func viewDidLoad() {
        _view.showTableviewLoading(false)
        _view.showFooterLoading(false)
    }
    
    func findMovie(_ queryTitle: String) {
        _discoverMovieList = DiscoverMovieListModel()
        _view.reloadData(completion: { [unowned self] in
            self._view.showTableviewLoading(true)
            self._view.showFooterLoading(false)
            self._queryTitle = queryTitle
            self.requestSearchMovieList()
        })
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        let detailVC = MovieListCellDetailViewController.newInstance(addProtocol: self, indexPath: indexPath)
        _wireframe.show(detailVC, with: .push, animated: true)
    }
    
    func discoverItem(at indexPath: IndexPath) -> DiscoverItemListView? {
        return _discoverMovieList.results[indexPath.row]
    }
    
    func loadItems() {
        DispatchQueue.main.async {
            self.requestSearchMovieList()
        }
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfItems(in section: Int) -> Int {
        return _discoverMovieList.results.count
    }
    
    func showStatus(_ status: DMButtonStatus, at indexPath: IndexPath) {
        DispatchQueue.main.async {
            self._discoverMovieList.results[indexPath.row].buttonStatus = status
            self._view.reloadData(at: indexPath)
            self.movieListCellDetailViewProtocol?.updateButtonStatus(status)
        }
    }
    
    func updateItemStatus(with movieID: Int, isComplete: Bool) {
        if let rowIndex = _discoverMovieList.results.enumerated().filter({ $0.element.tmdbID == movieID }).map({ $0.offset }).first {
            let status: DMButtonStatus = isComplete ? .done : .normal(nil, #imageLiteral(resourceName: "ic_plus"), true)
            let indexPath = IndexPath(row: rowIndex, section: 0)
            showStatus(status, at: indexPath)
        }
    }
    
    func loadPosterImage(_ imageView: UIImageView, at indexPath: IndexPath) {
        let movie = _discoverMovieList.results[indexPath.row]
        if let posterPath = movie.posterPath, !posterPath.isEmpty,
            let url = URL(string: TMDBUrl.image(.w200, posterPath).url) {
            imageView.af_setImage(withURL: url, placeholderImage: #imageLiteral(resourceName: "ic_place_holder"))
        } else {
            imageView.image = #imageLiteral(resourceName: "ic_place_holder")
        }
    }
    
    func addMovie(indexPath: IndexPath) {
        if let tmdbID = findIDForMovie(at: indexPath) {
            showStatus(.loading, at: indexPath)
            _addMoviesProtocol.addMovie(with: tmdbID)
        }
    }
    
    func clearResults() {
        _discoverMovieList = DiscoverMovieListModel()
        _view.reloadData(completion: nil)
    }
    
}

// MARK: - Load items -

extension SearchMoviesPresenter {
    
    @objc private func retryRequest() {
        _view.hideErrorView()
        _view.showTableviewLoading(true)
        _view.showFooterLoading(false)
        requestSearchMovieList()
    }
    
    private func requestSearchMovieList() {
        if _discoverMovieList.page < _discoverMovieList.totalPages {
            if !_isLoading {
                _isLoading = true
                let page = _discoverMovieList.page+1
                _interactor.find(title: _queryTitle, page: page, { [weak self] result in
                    self?._handleFeedResult(result)
                })
            }
        } else {
            _view.showFooterUpdatedMessage(message: "No more movies.")
        }
        
    }
    
    private func _handleFeedResult(_ result: RequestResultType<DiscoverMovieListModel>) {
        _isLoading = false
        switch result {
        case .success(let list):
            incrementResult(list)
            _view.hideErrorView()
            _view.showTableviewLoading(false)
            _view.showFooterLoading(true)
            _view.reloadData(completion: nil)
            break
        case .failure(let errorResponse):
            _view.showError(error: errorResponse, target: self, action: #selector(retryRequest))
            break
        }
    }
    
    private func incrementResult(_ discoverList: DiscoverMovieListModel) {
        if discoverList.totalResults == 0 {
            _view.showFooterUpdatedMessage(message: "No results.")
        } else {
            _discoverMovieList.page = discoverList.page
            _discoverMovieList.totalPages = discoverList.totalPages
            _discoverMovieList.totalResults = discoverList.totalResults
            _discoverMovieList.results.append(contentsOf: discoverList.results)
        }
    }
    
    private func findIDForMovie(at indexPath: IndexPath) -> Int? {
        let tmdbID = _discoverMovieList.results[indexPath.row].tmdbID
        if tmdbID == nil {
            _wireframe.showErrorAlert(with: "Sorry, it wasn't possible to add this movie")
        }
        return tmdbID
    }
    
}

