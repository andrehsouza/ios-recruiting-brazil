//
//  MovieDetailViewController.swift
//  DataMovie
//
//  Created by Andre Souza on 14/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import HCSStarRatingView
import ChameleonFramework

final class MovieDetailViewController: DMBaseViewController {
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var mainStackView: UIStackView!
    @IBOutlet weak var backgroundImageView: UIImageView!
    @IBOutlet weak var viewBackgroundDark: UIView!
    
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var headerCenterCardImageView: UIView!
    @IBOutlet weak var headerCenterImageView: UIImageView!
    
    @IBOutlet weak var mainInfoCardView: DMCardView!
    @IBOutlet weak var mainInfoCardViewLeftSpace: NSLayoutConstraint!
    @IBOutlet weak var mainInfoCardViewRightSpace: NSLayoutConstraint!
    @IBOutlet weak var mainInfoSegmentedView: UISegmentedControl!
    
    //Main info
    @IBOutlet weak var mainInfoStackView: UIStackView!
    @IBOutlet weak var movieTitleLbl: DMLabel!
    @IBOutlet weak var movieTitleLblRightSpace: NSLayoutConstraint!
    @IBOutlet weak var movieTitleScrollView: UIScrollView!
    @IBOutlet weak var movieRatingDurationStackView: UIStackView!
    @IBOutlet weak var movieRatingView: HCSStarRatingView!
    @IBOutlet weak var movieRatingLbl: UILabel!
    @IBOutlet weak var movieDurationImg: UIImageView!
    @IBOutlet weak var movieDurationLbl: UILabel!
    
    //Favorite and didSee buttons
    @IBOutlet weak var favoriteButton: DMButton!
    @IBOutlet weak var didSeeMovieButton: DMCircleButton!
    
    //Container
    @IBOutlet weak var containerView: UIView!
    
    //Top space to mainview info
    private var initialInfoContainerTopSpace: CGFloat = 0
    
    //Image transition
    private lazy var imageInteractor: ImageInteractor = ImageInteractor()
    private lazy var dismissInteractor: DismissInteracor = DismissInteracor()
    private lazy var imageAnimatorTransition: ImageAnimatorTransition = {
        let imageAnimatorTransition = ImageAnimatorTransition()
        imageAnimatorTransition.fromDelegate = self
        return imageAnimatorTransition
    }()
    
    //MovieDetailInterface
    var activeViewController: UIViewController? {
        willSet {
            removeLastViewController()
        }
        didSet {
            addViewController()
        }
    }
    
    // MARK: - Public properties -
    
    var presenter: MovieDetailPresenterInterface!
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        initialSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setNavbarTransparent()
        navigationController?.delegate = presenter.fromDelegate
    }
    
    // MARK: - Actions -
    
    @IBAction func touchSeen(_ sender: DMCircleButton) {
        presenter.touchDidWatch()
        didWatchMovie(presenter.movieEntity.didWatch)
    }
    
    @IBAction func touchFavorite(_ sender: Any) {
        presenter.touchFavorite()
        touchFavoriteButton()
    }
    
    @IBAction func ratingChanged(_ sender: Any) {
        presenter.didRateMovie(value: movieRatingView.value)
    }
    
    @IBAction func segmentChanged(_ sender: Any) {
        activeViewController = presenter.activeViewController(at: selectedSegmentIndex)
    }
    
    @IBAction func touchZoomPoster(_ sender: Any) {
        navigationController?.delegate = self
        presenter.touchZoomPoster()
    }
    
}

// MARK: - Functions -

extension MovieDetailViewController {
    
    private func initialSetup() {
        title = ""
        showMovieDetail()
        setupSegmentedControll()
        setupScrollView()
    }
    
    private func setupScrollView() {
        scrollView.delegate = self
        scrollView.contentInsetAdjustmentBehavior = .never
    }
    
    private func setupSegmentedControll() {
        mainInfoSegmentedView.removeAllSegments()
        presenter.initSegmentedViewControllers()
        activeViewController = presenter.activeViewController(at: selectedSegmentIndex)
    }
    
    private func showMovieDetail() {
        showMoviePoster()
        showInformation()
    }
    
    private func setInitialStateForViews() {
        initialInfoContainerTopSpace = mainInfoCardView.frame.origin.y
//        buttonsContainerViewBottomSpace.constant = 0
        didSeeMovieButton.transform = CGAffineTransform(scaleX: 0.0, y: 0.0)
        mainInfoCardView.alpha = 0
        headerCenterCardImageView.alpha = 0
        viewBackgroundDark.alpha = 0
        view.layoutIfNeeded()
    }
    
    private func touchFavoriteButton() {
        showFavoriteInfo(presenter.movieEntity.isFavorite)
        animateFavoriteButton()
    }
    
    private func showFavoriteInfo(_ isFavorite: Bool) {
        favoriteButton.isSelected = isFavorite
        favoriteButton.tintColor = isFavorite ? .red : .white
    }
    
    private func didWatchMovie(_ watched: Bool) {
        if !watched  {
            didSeeMovieButton.setIcon(image: #imageLiteral(resourceName: "ic_didnt_see"), animation: .transitionFlipFromBottom)
        } else {
            didSeeMovieButton.setIcon(image: #imageLiteral(resourceName: "ic_check"),  animation: .transitionFlipFromTop)
        }
    }
    
}

// MARK: - Animations -

extension MovieDetailViewController {
    
    private func animateFavoriteButton() {
        favoriteButton.transform = CGAffineTransform(scaleX: 0.90, y: 0.90)
        UIView.animate(withDuration: 0.2, delay: 0.0, options: [.curveEaseInOut],  animations: {
            self.favoriteButton.transform = CGAffineTransform(scaleX: 1.2, y: 1.2)
        }, completion: {  _ in
            UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut],  animations: {
                self.favoriteButton.transform = CGAffineTransform.identity
            })
        })
    }
    
    private func animateAfterTransition() {
        headerCenterCardImageView.alpha = 1
        UIView.animate(withDuration: 0.6,  delay: 0.0, usingSpringWithDamping: 0.55, initialSpringVelocity: 0.0, options: [.curveEaseInOut], animations: {
            self.didSeeMovieButton.transform = CGAffineTransform.identity
            self.mainInfoCardView.alpha = 1
            self.viewBackgroundDark.alpha = 1
//            self.buttonsContainerViewBottomSpace.constant = 15
            self.customizeColors()
            self.view.layoutIfNeeded()
        })
    }
    
    private func customizeColors() {
        if presenter.movieEntity.posterPath != nil {
            let imageColors = ColorsFromImage(presenter.movieEntity.poster, withFlatScheme: true).sorted(by: { $0.luminance > $1.luminance})
            
            var averageColor = imageColors[4]//AverageColorFromImage(image)
            if averageColor.isLight {
                averageColor = averageColor.darker()
            }
            
            let darkertColor = averageColor
            let lighterColor = imageColors[0]
            
            mainInfoCardView.layerBackgroundColor = darkertColor
            didSeeMovieButton.fillColor = lighterColor
            didSeeMovieButton.tintColor = ContrastColorOf(lighterColor, returnFlat: true)
        }
    }
    
    private func showMainInfoContent(_ show: Bool) {
        UIView.animate(withDuration: 0.6,  delay: 0.0, usingSpringWithDamping: 0.8, initialSpringVelocity: 0.0, options: [.curveEaseInOut], animations: {
            self.movieRatingDurationStackView.isHidden = !show
            self.didSeeMovieButton.transform = show ? CGAffineTransform.identity : CGAffineTransform(scaleX: 0.0, y: 0.0)
            self.headerCenterCardImageView.alpha = show ? 1 : 0
            self.movieTitleLbl.topTextInset = show ? 0 : (self.topHeight - 15 - self.movieTitleLbl.frame.height - 8)
            self.movieTitleScrollView.setContentOffset(.zero, animated: true)
        })
    }
    
    private func animateDuringScroll(offset: CGFloat) {
        
        if offset > 0 {
            if offset < initialInfoContainerTopSpace {
                
                let percent = (offset / initialInfoContainerTopSpace)
                let mainInfoLeftRightSpace = 35 - (35 * percent)
                let viewAlpha = 1 - percent
                let titleSizeIncrement = 17 + (5 * percent)
                let cornerRadius = 8 - (8 * percent)
                let backButtonSize = navigationController?.navigationBar.backIndicatorImage?.size
                let leftTitleTextInset = ((backButtonSize?.width ?? 0) + 5) * percent
                let bottomTitleTextInset = 8 * percent
                let rightTitleTextInsets = navigationItem.rightBarButtonItems?.compactMap({ $0.customView?.frame.size.width }).reduce(0, +) ?? 0
                
//                debugPrint(">>> \(viewAlpha)")
                
                mainInfoCardView.cornerRadius = cornerRadius
                movieTitleLbl.font = movieTitleLbl.font.withSize(titleSizeIncrement)
                movieTitleLbl.adjustsFontSizeToFitWidth = true
                movieTitleLblRightSpace.constant = 30 + (rightTitleTextInsets * percent)
                mainInfoCardViewRightSpace.constant = mainInfoLeftRightSpace
                mainInfoCardViewLeftSpace.constant = mainInfoLeftRightSpace
                movieTitleLbl.leftTextInset = leftTitleTextInset
                movieTitleLbl.bottomTextInset = bottomTitleTextInset
                headerCenterCardImageView.alpha = viewAlpha - 0.5
                
                if percent < 0.7 {
                    movieRatingDurationStackView.alpha = viewAlpha
                    if movieRatingDurationStackView.isHidden {
                        showMainInfoContent(true)
                    }
                } else if !movieRatingDurationStackView.isHidden  {
                    showMainInfoContent(false)
                }
                
            } else {
                mainInfoCardViewRightSpace.constant = 0
                mainInfoCardViewLeftSpace.constant = 0
                movieRatingDurationStackView.alpha = 0
                movieRatingDurationStackView.isHidden = true
            }
        } else {
            if headerCenterCardImageView.alpha == 1 { return }
            UIView.animate(withDuration: 0.2,  delay: 0.0, options: [.curveEaseIn], animations: {
                self.headerCenterCardImageView.alpha = 1
            })
        }
    }
    
}

//MARK: - UIScrollViewDelegate -

extension MovieDetailViewController: UIScrollViewDelegate {

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if scrollView == self.scrollView {
            animateDuringScroll(offset: ceil(scrollView.contentOffset.y))
        }
    }

}

// MARK: - ImageAnimatorDelegate -

extension MovieDetailViewController: ImageAnimatorDelegate {
    
    func transitionWillStartWith(animator: ImageAnimatorTransition) {
        if animator.transitionMode == .push {
            setInitialStateForViews()
        }
    }
    
    func transitionDidEndWith(animator: ImageAnimatorTransition) {
        if animator.transitionMode == .push {
            animateAfterTransition()
        }
    }
    
    func referenceImageView(for animator: ImageAnimatorTransition) -> UIImageView? {
        return headerCenterImageView
    }
    
    func referenceImageViewFrameInTransitioningView(for animator: ImageAnimatorTransition) -> CGRect? {
        view.layoutIfNeeded()
        return headerCenterCardImageView.convert(headerCenterImageView.frame, to: view)
    }
}

// MARK: - Movie Information

extension MovieDetailViewController {
    
    private func showMoviePoster() {
        backgroundImageView.image = presenter.movieEntity.posterPath == nil ? UIImage.from(color: .blueColor) : presenter.movieEntity.poster
        headerCenterImageView.image = presenter.movieEntity.poster
    }
    
    private func showInformation() {
        movieTitleLbl.text = presenter.movieEntity.title
        movieRatingView.value = CGFloat(presenter.movieEntity.personalRating)
        movieRatingLbl.text = presenter.movieEntity.voteAverage
        movieDurationLbl.text = presenter.movieEntity.runtime ?? " -- "
        didWatchMovie(presenter.movieEntity.didWatch)
        showFavoriteInfo(presenter.movieEntity.isFavorite)
    }
    
}

//MARK: - Switch ViewControllers -

extension MovieDetailViewController {
    
    private func removeLastViewController() {
        if let inActiveVC = activeViewController {
            // Notify Child View Controller
            inActiveVC.willMove(toParent: nil)
            
            // Remove Child View From Superview
            inActiveVC.view.removeFromSuperview()
            
            // Notify Child View Controller
            inActiveVC.removeFromParent()
        }
    }
    
    private func addViewController() {
        if let activeVC = activeViewController {
            // call before adding child view controller's view as subview
            addChild(activeVC)
            
            containerView.addSubview(activeVC.view)
            
            // Configure Child View size
            activeVC.view.bindFrameToSuperviewBounds()
            
            // Notify Child View Controller
            activeVC.didMove(toParent: self)
        }
    }
    
}

// MARK: - MovieDetailViewInterface -

extension MovieDetailViewController: MovieDetailViewInterface {
    
    var selectedSegmentIndex: MovieDetailContent {
        set {
            mainInfoSegmentedView.selectedSegmentIndex = newValue.rawValue
        }
        get {
            guard let detailContent = MovieDetailContent.init(rawValue: mainInfoSegmentedView.selectedSegmentIndex) else { return .overview }
            return detailContent
        }
    }
    
    var imageTransition: ImageAnimatorTransition {
        return imageAnimatorTransition
    }
    
    
    var topCardviewHeight: CGFloat {
        return mainInfoCardView.bounds.height
    }
    
    func insertSegment(title: String, at index: Int) {
        mainInfoSegmentedView.insertSegment(withTitle: title, at: index, animated: false)
    }
    
}

// MARK: - UINavigationControllerDelegate -

extension MovieDetailViewController: UINavigationControllerDelegate {
    
    func navigationController(_ navigationController: UINavigationController, interactionControllerFor animationController: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {
        return imageInteractor.isInProgress ? imageInteractor : nil
    }
    
    func navigationController(_ navigationController: UINavigationController, animationControllerFor operation: UINavigationController.Operation, from fromVC: UIViewController, to toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        
        if operation == .push {
            imageInteractor.navControllerToAttach = navigationController
            imageAnimatorTransition.transitionMode = .push
        } else {
            imageAnimatorTransition.transitionMode = .pop
        }
        
        return imageAnimatorTransition
    }
    
}

