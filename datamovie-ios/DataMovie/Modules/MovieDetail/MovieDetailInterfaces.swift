//
//  MovieDetailInterfaces.swift
//  DataMovie
//
//  Created by Andre Souza on 14/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import Alamofire


enum MovieDetailNavigationOption {
    case zoomImage(moviedetail: MovieViewDetail, imageTransition: ImageAnimatorTransition)
    case personDetail(personDetail: PersonDetailModel)
}

protocol MovieDetailWireframeInterface: WireframeInterface {
    func navigate(to option: MovieDetailNavigationOption)
}

protocol MovieDetailViewInterface: ViewInterface & ImageAnimatorDelegate {
    var imageTransition: ImageAnimatorTransition { get }
    var topCardviewHeight: CGFloat { get }
    var selectedSegmentIndex: MovieDetailContent { get set }
    var activeViewController: UIViewController? { get set }
    func insertSegment(title: String, at index: Int)
}

protocol MovieDetailSubViewInterface: class {
    var viewController: UIViewController { get }
    var presenter: MovieDetailPresenterInterface? { get set }
    func showInformation()
}

protocol MovieDetailOverviewInterface: MovieDetailSubViewInterface  {
    
}

protocol MovieDetailListViewInterface: MovieDetailSubViewInterface {
    var detailContent: MovieDetailContent! { get set }
    func reloadData()
    func reloadData(at index: IndexPath)
    func showFooterLoading(text: String)
    func showFooterMessage(message: String, buttonText: String?, target: Any?, action: Selector?)
    func updateItemStatus(with movieID: Int, isComplete: Bool)
    func resizeTableview()
}

extension MovieDetailListViewInterface {
    func showFooterMessage(message: String, buttonText: String? = nil, target: Any? = nil, action: Selector? = nil) {
        self.showFooterMessage(message: message, buttonText: buttonText, target: target, action: action)
    }
}


protocol MovieDetailPresenterInterface: (PresenterInterface & AddMoviesProtocol & DiscoverMovieDetailProtocol) {
    var fromDelegate: UINavigationControllerDelegate? { get }
    var movieEntity: MovieViewDetail { get }
    var topCardviewHeight: CGFloat { get }
    //Detailviewcontroller
    func touchZoomPoster()
    func touchDidWatch()
    func touchFavorite()
    func touchHomepage()
    func didRateMovie(value: CGFloat)
    func initSegmentedViewControllers()
    func activeViewController(at index: MovieDetailContent) -> UIViewController
    func didSelectCast(at indexPath: IndexPath, cacheImage: UIImage?)
    func numberOfGenre() -> Int
    func genre(at indexPath: IndexPath) -> String
    func numberOfCast() -> Int
    func person(at indexPath: IndexPath) -> CastEntity
    //ListViewcontroller
    func loadRelatedMovies()
    func numberOfSections(at detailContent: MovieDetailContent) -> Int
    func numberOfItems(at detailContent: MovieDetailContent, in section: Int) -> Int
    func video(at indexPath: IndexPath) -> VideoEntity?
    func updateItemStatus(with movieID: Int, isComplete: Bool)
    func showStatus(_ status: DMButtonStatus, at indexPath: IndexPath)
    func didSelectTrailer(at indexPath: IndexPath)
    func didSelectRelatedMovie(at indexPath: IndexPath)
    func loadPersonPicture(_ imageView: UIImageView, at indexPath: IndexPath)
    func loadPosterImage(_ imageView: UIImageView, at indexPath: IndexPath)
}

protocol MovieDetailInteractorInterface: InteractorInterface {
    func getMovieDetail(tmdbID: Int, _ completion: @escaping (RequestResultType<MovieModel>) -> Void)
    func downloadPoster(posterPath: String, _ completion: @escaping (DataResponse<Data>) -> Void)
    func getRecommendationsFor(movieID: Int, page: Int, _ completion: @escaping (RequestResultType<DiscoverMovieListModel>) -> Void)
}
