//
//  PersonDetailPresenter.swift
//  DataMovie
//
//  Created by Andre Souza on 14/09/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class PersonDetailPresenter {

    // MARK: - Private properties -

    private unowned var _view: PersonDetailViewInterface
    private var _interactor: PersonDetailInteractorInterface
    private var _wireframe: PersonDetailWireframeInterface
    private var _personDetail: PersonDetailModel

    // MARK: - Lifecycle -

    init(wireframe: PersonDetailWireframeInterface, view: PersonDetailViewInterface, interactor: PersonDetailInteractorInterface, personDetail: PersonDetailModel) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        _personDetail = personDetail
    }
}

// MARK: - Extensions -

extension PersonDetailPresenter: PersonDetailPresenterInterface {
    
    func touchFacebook() {
        if let fbID = _personDetail.externalIds?.facebookID, let fbAppURL = URL(string: "fb://profile/\(fbID)") {
            if UIApplication.shared.canOpenURL(fbAppURL) {
                UIApplication.shared.open(fbAppURL, options: convertToUIApplicationOpenExternalURLOptionsKeyDictionary([:]), completionHandler: nil)
            } else if let fbURL = URL(string: "https://facebook.com/\(fbID)")  {
                openSafariVC(with: fbURL)
            }
        }
    }
    
    func touchTwitter() {
        if let twID = _personDetail.externalIds?.twitterID, let twAppURL = URL(string: "twitter://\(twID)") {
            if UIApplication.shared.canOpenURL(twAppURL) {
                UIApplication.shared.open(twAppURL, options: convertToUIApplicationOpenExternalURLOptionsKeyDictionary([:]), completionHandler: nil)
            } else if let fbURL = URL(string: "https://twitter.com/\(twID)")  {
                openSafariVC(with: fbURL)
            }
        }
    }
    
    func touchInstagram() {
        if let instID = _personDetail.externalIds?.instagramID, let instAppURL = URL(string: "instagram://user?username=\(instID)") {
            if UIApplication.shared.canOpenURL(instAppURL) {
                UIApplication.shared.open(instAppURL, options: convertToUIApplicationOpenExternalURLOptionsKeyDictionary([:]), completionHandler: nil)
            } else if let fbURL = URL(string: "https://instagram.com/\(instID)")  {
                openSafariVC(with: fbURL)
            }
        }
    }
    
    func touchIMDB() {
        if let imdbID = _personDetail.externalIds?.imdbID, let imdbAppURL = URL(string: "imdb:///name/\(imdbID)") {
            if UIApplication.shared.canOpenURL(imdbAppURL) {
                UIApplication.shared.open(imdbAppURL, options: convertToUIApplicationOpenExternalURLOptionsKeyDictionary([:]), completionHandler: nil)
            } else if let imdbURL = URL(string: "https://www.imdb.com/name/\(imdbID)") {
                openSafariVC(with: imdbURL)
            }
        }
    }
    
    
    func viewDidLoad() {
        _view.setBackgroundImage(_personDetail.profileBgImage)
        _view.setCacheProfilePicture(_personDetail.cachePicture)
        _view.setName(_personDetail.name)
        requestPersonDetail()
    }
    
    func loadPersonPicture(_ imageView: UIImageView) {
        if let imagePath = _personDetail.profilePicture, !imagePath.isEmpty, let url = URL(string: TMDBUrl.image(.w500, imagePath).url) {
            imageView.af_setImage(withURL: url, placeholderImage: _personDetail.cachePicture)
        } else {
            imageView.image = _personDetail.genderType == .woman ? #imageLiteral(resourceName: "ic_female") : #imageLiteral(resourceName: "ic_male")
        }
    }
    
    func touchHomepage() {
        if let homePageString = _personDetail.homepage, let homePageURL = URL(string: homePageString) {
            let safariVC = Util.newSFSafariInstance(with: homePageURL)
            _wireframe.show(safariVC, with: .present(completion: nil), animated: true)
        }
    }
    
}

// MARK: - Request -

extension PersonDetailPresenter {
    
    @objc private func requestPersonDetail() {
        guard let personID = _personDetail.personID else { return }
        _view.showLoading(true)
        _interactor.getDetail(personID: personID, { [weak self] result in
            self?._handleFeedResult(result)
        })
    }
    
    private func _handleFeedResult(_ result: RequestResultType<PersonDetailModel>) {
        switch result {
        case .success(let personDetail):
            _personDetail = personDetail
            _view.showInfo(personDetail: personDetail)
            _view.showLoading(false)
            break
        case .failure(let errorResponse):
            _view.showError(error: errorResponse, target: self, action: #selector(requestPersonDetail))
            break
        }
    }
    
    private func openSafariVC(with url: URL) {
        let safariVC = Util.newSFSafariInstance(with: url)
        _wireframe.show(safariVC, with: .present(completion: nil), animated: true)
    }
        
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToUIApplicationOpenExternalURLOptionsKeyDictionary(_ input: [String: Any]) -> [UIApplication.OpenExternalURLOptionsKey: Any] {
	return Dictionary(uniqueKeysWithValues: input.map { key, value in (UIApplication.OpenExternalURLOptionsKey(rawValue: key), value)})
}
