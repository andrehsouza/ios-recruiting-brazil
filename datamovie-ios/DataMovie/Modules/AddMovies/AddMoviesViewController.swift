//
//  AddMoviesViewController.swift
//  DataMovie
//
//  Created by Andre Souza on 14/08/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit


final class AddMoviesViewController: DMBaseViewController {

    @IBOutlet weak var rightBarbuttonItem: UIBarButtonItem!
    @IBOutlet weak var toolbar: UIToolbar!
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var containerView: UIView!
    
    // MARK: - Public properties -
    
    var activeViewController: UIViewController? {
        willSet {
            removeLastViewController()
        }
        didSet {
            addViewController()
        }
    }
    
    var selectedSegmentIndex: Int {
        set {
            segmentedControl.selectedSegmentIndex = newValue
        }
        get {
            return segmentedControl.selectedSegmentIndex
        }
    }

    var presenter: AddMoviesPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        initialSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setDefaultNavbar()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        view.endEditing(true)
    }
	
    @IBAction func segmentChanged(_ sender: Any) {
        activeViewController = presenter.activeViewController(at: selectedSegmentIndex)
    }
    
    @IBAction func touchClose(_ sender: Any) {
        closeModal()
    }
    
    @IBAction func touchSearch(_ sender: Any) {
        showSearchView()
    }

}

// MARK: - Functions -

extension AddMoviesViewController {
    
    private func initialSetup() {
        toolbar.delegate = self
        searchBar.delegate = self
        segmentedControl.removeAllSegments()
        presenter.initSegmentedViewControllers()
        showSegmentedControl()
    }
    
    private func showSearchView() {
        addViewToToolbar(searchBar)
        searchBar.text = ""
        searchBar.becomeFirstResponder()
        rightBarbuttonItem.isEnabled = false
        presenter.showSearchController()
    }
    
    private func showSegmentedControl() {
        addViewToToolbar(segmentedControl)
        rightBarbuttonItem.isEnabled = true
        activeViewController = presenter.activeViewController(at: selectedSegmentIndex)
    }
    
    private func addViewToToolbar(_ view: UIView) {
        let barButton = UIBarButtonItem(customView: {
            view.frame = CGRect(x: 10, y: (view.bounds.height/2), width: toolbar.bounds.width-10, height: view.bounds.height)
            return view
        }())
        toolbar.setItems([barButton], animated: true)
    }
    
    private func closeModal() {
        navigationController?.setNavigationBarHidden(true, animated: true)
        dismiss(animated: true, completion: nil)
    }
    
    private func afterPresentTransition() {
        navigationController?.setNavigationBarHidden(false, animated: true)
        UIView.animate(withDuration: 0.2, delay: 0.1, options: [.curveLinear],  animations: {
            self.toolbar.alpha = 1
        }, completion: nil)
    }
    
}

// MARK: - Extensions -

extension AddMoviesViewController: AddMoviesViewInterface {
    
    func insertSegment(title: String, at index: Int) {
        segmentedControl.insertSegment(withTitle: title, at: index, animated: false)
    }

}

// MARK: - CircularAnimatorDelegate -

extension AddMoviesViewController: CircularAnimatorDelegate {
    
    func transitionWillStartWith(animator: CircularTransition) {
        navigationController?.isNavigationBarHidden = true
        toolbar.alpha = 0
    }
    
    func transitionDidEndWith(animator: CircularTransition) {
        afterPresentTransition()
    }
    
}

//MARK: - UISearchResultsUpdating -

extension AddMoviesViewController: UISearchBarDelegate {
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        showSegmentedControl()
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        guard let queryText = searchBar.text else { return }
        presenter.findMovie(with: queryText)
    }
    
}

//MARK: - UIToolbarDelegate -

extension AddMoviesViewController: UIToolbarDelegate {
    
    func positionForBar(bar: UIBarPositioning) -> UIBarPosition {
        return .topAttached
    }
}

//MARK: - Switch ViewControllers -

extension AddMoviesViewController {
    
    private func removeLastViewController() {
        if let inActiveVC = activeViewController {
            // Notify Child View Controller
            inActiveVC.willMove(toParent: nil)
            
            // Remove Child View From Superview
            inActiveVC.view.removeFromSuperview()
            
            // Notify Child View Controller
            inActiveVC.removeFromParent()
        }
    }
    
    private func addViewController() {
        if let activeVC = activeViewController {
            // call before adding child view controller's view as subview
            addChild(activeVC)
            
            containerView.addSubview(activeVC.view)
            
            // Configure Child View size
            activeVC.view.bindFrameToSuperviewBounds()
            
            // Notify Child View Controller
            activeVC.didMove(toParent: self)
        }
    }
    
}
